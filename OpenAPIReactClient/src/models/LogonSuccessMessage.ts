/* tslint:disable */
/* eslint-disable */
/**
 * Password Manager
 * This is a password manager server.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: test@te.st
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GenericSuccessMessage,
    GenericSuccessMessageFromJSON,
    GenericSuccessMessageFromJSONTyped,
    GenericSuccessMessageToJSON,
    LogonSuccessMessageAllOf,
    LogonSuccessMessageAllOfFromJSON,
    LogonSuccessMessageAllOfFromJSONTyped,
    LogonSuccessMessageAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface LogonSuccessMessage
 */
export interface LogonSuccessMessage {
    /**
     * 
     * @type {boolean}
     * @memberof LogonSuccessMessage
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LogonSuccessMessage
     */
    message?: string;
    /**
     * 
     * @type {Date}
     * @memberof LogonSuccessMessage
     */
    lastLogin?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof LogonSuccessMessage
     */
    failedLogins?: number;
}

export function LogonSuccessMessageFromJSON(json: any): LogonSuccessMessage {
    return LogonSuccessMessageFromJSONTyped(json, false);
}

export function LogonSuccessMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): LogonSuccessMessage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'success': !exists(json, 'success') ? undefined : json['success'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'lastLogin': !exists(json, 'lastLogin') ? undefined : (json['lastLogin'] === null ? null : new Date(json['lastLogin'])),
        'failedLogins': !exists(json, 'failedLogins') ? undefined : json['failedLogins'],
    };
}

export function LogonSuccessMessageToJSON(value?: LogonSuccessMessage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'success': value.success,
        'message': value.message,
        'lastLogin': value.lastLogin === undefined ? undefined : (value.lastLogin === null ? null : value.lastLogin.toISOString()),
        'failedLogins': value.failedLogins,
    };
}


