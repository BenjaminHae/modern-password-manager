/* tslint:disable */
/* eslint-disable */
/**
 * Password Manager
 * This is a password manager server.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: test@te.st
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChangePassword,
    ChangePasswordFromJSON,
    ChangePasswordToJSON,
    GenericSuccessMessage,
    GenericSuccessMessageFromJSON,
    GenericSuccessMessageToJSON,
    HistoryItem,
    HistoryItemFromJSON,
    HistoryItemToJSON,
    LogonInformation,
    LogonInformationFromJSON,
    LogonInformationToJSON,
    LogonResult,
    LogonResultFromJSON,
    LogonResultToJSON,
    RegistrationInformation,
    RegistrationInformationFromJSON,
    RegistrationInformationToJSON,
    UserSettings,
    UserSettingsFromJSON,
    UserSettingsToJSON,
    UserWebAuthnChallenge,
    UserWebAuthnChallengeFromJSON,
    UserWebAuthnChallengeToJSON,
    UserWebAuthnCreateWithKey,
    UserWebAuthnCreateWithKeyFromJSON,
    UserWebAuthnCreateWithKeyToJSON,
    UserWebAuthnCred,
    UserWebAuthnCredFromJSON,
    UserWebAuthnCredToJSON,
    UserWebAuthnGet,
    UserWebAuthnGetFromJSON,
    UserWebAuthnGetToJSON,
    UserWebAuthnLogonResult,
    UserWebAuthnLogonResultFromJSON,
    UserWebAuthnLogonResultToJSON,
} from '../models';

export interface ChangePasswordRequest {
    changePassword: ChangePassword;
}

export interface CreateUserWebAuthnRequest {
    userWebAuthnCreateWithKey: UserWebAuthnCreateWithKey;
}

export interface DeleteUserWebAuthnRequest {
    id: number;
}

export interface LoginUserRequest {
    logonInformation: LogonInformation;
}

export interface LoginUserWebAuthnGetRequest {
    userWebAuthnGet: UserWebAuthnGet;
}

export interface RegisterUserRequest {
    registrationInformation: RegistrationInformation;
}

export interface SetUserSettingsRequest {
    userSettings: UserSettings;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * change password of current user and upload reencrypted accounts
     * change user password
     */
    async changePasswordRaw(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GenericSuccessMessage>> {
        if (requestParameters.changePassword === null || requestParameters.changePassword === undefined) {
            throw new runtime.RequiredError('changePassword','Required parameter requestParameters.changePassword was null or undefined when calling changePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-CSRF-TOKEN"] = this.configuration.apiKey("X-CSRF-TOKEN"); // csrf authentication
        }

        const response = await this.request({
            path: `/user/changepassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordToJSON(requestParameters.changePassword),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericSuccessMessageFromJSON(jsonValue));
    }

    /**
     * change password of current user and upload reencrypted accounts
     * change user password
     */
    async changePassword(requestParameters: ChangePasswordRequest, initOverrides?: RequestInit): Promise<GenericSuccessMessage> {
        const response = await this.changePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * add webauthn
     * add a webauthn credential
     */
    async createUserWebAuthnRaw(requestParameters: CreateUserWebAuthnRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GenericSuccessMessage>> {
        if (requestParameters.userWebAuthnCreateWithKey === null || requestParameters.userWebAuthnCreateWithKey === undefined) {
            throw new runtime.RequiredError('userWebAuthnCreateWithKey','Required parameter requestParameters.userWebAuthnCreateWithKey was null or undefined when calling createUserWebAuthn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-CSRF-TOKEN"] = this.configuration.apiKey("X-CSRF-TOKEN"); // csrf authentication
        }

        const response = await this.request({
            path: `/user/webauthn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserWebAuthnCreateWithKeyToJSON(requestParameters.userWebAuthnCreateWithKey),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericSuccessMessageFromJSON(jsonValue));
    }

    /**
     * add webauthn
     * add a webauthn credential
     */
    async createUserWebAuthn(requestParameters: CreateUserWebAuthnRequest, initOverrides?: RequestInit): Promise<GenericSuccessMessage> {
        const response = await this.createUserWebAuthnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a stored WebAuthn Public Key
     */
    async deleteUserWebAuthnRaw(requestParameters: DeleteUserWebAuthnRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserWebAuthnCred>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserWebAuthn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/webauthn/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserWebAuthnCredFromJSON));
    }

    /**
     * Delete a stored WebAuthn Public Key
     */
    async deleteUserWebAuthn(requestParameters: DeleteUserWebAuthnRequest, initOverrides?: RequestInit): Promise<Array<UserWebAuthnCred>> {
        const response = await this.deleteUserWebAuthnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a history of successful and failed logins
     */
    async getUserHistoryRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<HistoryItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HistoryItemFromJSON));
    }

    /**
     * Returns a history of successful and failed logins
     */
    async getUserHistory(initOverrides?: RequestInit): Promise<Array<HistoryItem>> {
        const response = await this.getUserHistoryRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the client settings of the current user
     */
    async getUserSettingsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSettingsFromJSON(jsonValue));
    }

    /**
     * Returns the client settings of the current user
     */
    async getUserSettings(initOverrides?: RequestInit): Promise<UserSettings> {
        const response = await this.getUserSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * get all registered WebAuthn credentials for the user
     */
    async getUserWebAuthnCredsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserWebAuthnCred>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/webauthn`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserWebAuthnCredFromJSON));
    }

    /**
     * get all registered WebAuthn credentials for the user
     */
    async getUserWebAuthnCreds(initOverrides?: RequestInit): Promise<Array<UserWebAuthnCred>> {
        const response = await this.getUserWebAuthnCredsRaw(initOverrides);
        return await response.value();
    }

    /**
     * login
     */
    async loginUserRaw(requestParameters: LoginUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LogonResult>> {
        if (requestParameters.logonInformation === null || requestParameters.logonInformation === undefined) {
            throw new runtime.RequiredError('logonInformation','Required parameter requestParameters.logonInformation was null or undefined when calling loginUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-CSRF-TOKEN"] = this.configuration.apiKey("X-CSRF-TOKEN"); // csrf authentication
        }

        const response = await this.request({
            path: `/user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LogonInformationToJSON(requestParameters.logonInformation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogonResultFromJSON(jsonValue));
    }

    /**
     * login
     */
    async loginUser(requestParameters: LoginUserRequest, initOverrides?: RequestInit): Promise<LogonResult> {
        const response = await this.loginUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get a WebAuthN challenge
     */
    async loginUserWebAuthnChallengeRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserWebAuthnChallenge>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/login/webauthn`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWebAuthnChallengeFromJSON(jsonValue));
    }

    /**
     * get a WebAuthN challenge
     */
    async loginUserWebAuthnChallenge(initOverrides?: RequestInit): Promise<UserWebAuthnChallenge> {
        const response = await this.loginUserWebAuthnChallengeRaw(initOverrides);
        return await response.value();
    }

    /**
     * add webauthn
     * login user with WebAuthn
     */
    async loginUserWebAuthnGetRaw(requestParameters: LoginUserWebAuthnGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserWebAuthnLogonResult>> {
        if (requestParameters.userWebAuthnGet === null || requestParameters.userWebAuthnGet === undefined) {
            throw new runtime.RequiredError('userWebAuthnGet','Required parameter requestParameters.userWebAuthnGet was null or undefined when calling loginUserWebAuthnGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-CSRF-TOKEN"] = this.configuration.apiKey("X-CSRF-TOKEN"); // csrf authentication
        }

        const response = await this.request({
            path: `/user/login/webauthn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserWebAuthnGetToJSON(requestParameters.userWebAuthnGet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWebAuthnLogonResultFromJSON(jsonValue));
    }

    /**
     * add webauthn
     * login user with WebAuthn
     */
    async loginUserWebAuthnGet(requestParameters: LoginUserWebAuthnGetRequest, initOverrides?: RequestInit): Promise<UserWebAuthnLogonResult> {
        const response = await this.loginUserWebAuthnGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logs out current logged in user session
     */
    async logoutUserRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<GenericSuccessMessage>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericSuccessMessageFromJSON(jsonValue));
    }

    /**
     * Logs out current logged in user session
     */
    async logoutUser(initOverrides?: RequestInit): Promise<GenericSuccessMessage> {
        const response = await this.logoutUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * registration
     */
    async registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GenericSuccessMessage>> {
        if (requestParameters.registrationInformation === null || requestParameters.registrationInformation === undefined) {
            throw new runtime.RequiredError('registrationInformation','Required parameter requestParameters.registrationInformation was null or undefined when calling registerUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-CSRF-TOKEN"] = this.configuration.apiKey("X-CSRF-TOKEN"); // csrf authentication
        }

        const response = await this.request({
            path: `/user`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrationInformationToJSON(requestParameters.registrationInformation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericSuccessMessageFromJSON(jsonValue));
    }

    /**
     * registration
     */
    async registerUser(requestParameters: RegisterUserRequest, initOverrides?: RequestInit): Promise<GenericSuccessMessage> {
        const response = await this.registerUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * parameter contains encrypted client settings
     * change client settings of current user
     */
    async setUserSettingsRaw(requestParameters: SetUserSettingsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GenericSuccessMessage>> {
        if (requestParameters.userSettings === null || requestParameters.userSettings === undefined) {
            throw new runtime.RequiredError('userSettings','Required parameter requestParameters.userSettings was null or undefined when calling setUserSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-CSRF-TOKEN"] = this.configuration.apiKey("X-CSRF-TOKEN"); // csrf authentication
        }

        const response = await this.request({
            path: `/user/settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSettingsToJSON(requestParameters.userSettings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericSuccessMessageFromJSON(jsonValue));
    }

    /**
     * parameter contains encrypted client settings
     * change client settings of current user
     */
    async setUserSettings(requestParameters: SetUserSettingsRequest, initOverrides?: RequestInit): Promise<GenericSuccessMessage> {
        const response = await this.setUserSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
