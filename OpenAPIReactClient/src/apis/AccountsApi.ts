/* tslint:disable */
/* eslint-disable */
/**
 * Password Manager
 * This is a password manager server.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: test@te.st
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Account,
    AccountFromJSON,
    AccountToJSON,
    AccountId,
    AccountIdFromJSON,
    AccountIdToJSON,
} from '../models';

export interface AddAccountsRequest {
    account: Array<Account>;
}

export interface DeleteAccountRequest {
    id: number;
}

export interface UpdateAccountRequest {
    id: number;
    account: Account;
}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI {

    /**
     * Add Account
     */
    async addAccountsRaw(requestParameters: AddAccountsRequest): Promise<runtime.ApiResponse<Array<AccountId>>> {
        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling addAccounts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-CSRF-TOKEN"] = this.configuration.apiKey("X-CSRF-TOKEN"); // csrf authentication
        }

        const response = await this.request({
            path: `/accounts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.account.map(AccountToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountIdFromJSON));
    }

    /**
     * Add Account
     */
    async addAccounts(requestParameters: AddAccountsRequest): Promise<Array<AccountId>> {
        const response = await this.addAccountsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a stored Account
     */
    async deleteAccountRaw(requestParameters: DeleteAccountRequest): Promise<runtime.ApiResponse<Array<AccountId>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountIdFromJSON));
    }

    /**
     * Delete a stored Account
     */
    async deleteAccount(requestParameters: DeleteAccountRequest): Promise<Array<AccountId>> {
        const response = await this.deleteAccountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the accounts stored by the current user
     */
    async getAccountsRaw(): Promise<runtime.ApiResponse<Array<AccountId>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountIdFromJSON));
    }

    /**
     * Returns the accounts stored by the current user
     */
    async getAccounts(): Promise<Array<AccountId>> {
        const response = await this.getAccountsRaw();
        return await response.value();
    }

    /**
     * Update a stored account
     */
    async updateAccountRaw(requestParameters: UpdateAccountRequest): Promise<runtime.ApiResponse<Array<AccountId>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAccount.');
        }

        if (requestParameters.account === null || requestParameters.account === undefined) {
            throw new runtime.RequiredError('account','Required parameter requestParameters.account was null or undefined when calling updateAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-CSRF-TOKEN"] = this.configuration.apiKey("X-CSRF-TOKEN"); // csrf authentication
        }

        const response = await this.request({
            path: `/accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountToJSON(requestParameters.account),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountIdFromJSON));
    }

    /**
     * Update a stored account
     */
    async updateAccount(requestParameters: UpdateAccountRequest): Promise<Array<AccountId>> {
        const response = await this.updateAccountRaw(requestParameters);
        return await response.value();
    }

}
