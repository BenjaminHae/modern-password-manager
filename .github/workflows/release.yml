name: build application and create release
on: push 
#  push:
#    tags:
#      - 'v*'
jobs:
  build_react:
    name: build react app 
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Cache node
        uses: actions/cache@v2
        env:
          cache-name: cache-react-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm install
        working-directory: ./reactClient/my-app/
      - run: npm link ../../OpenAPIReactClient/
        working-directory: ./reactClient/my-app/
      - run: npm run build
        working-directory: ./reactClient/my-app/
        env:
          CI: ""
      - uses: actions/upload-artifact@v2
        with:
          name: react-build
          path: reactClient/my-app/build/
  build_symfony_and_release:
    name: build symfony
    needs: build_react
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: install php
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          tools: composer
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
        working-directory: ./Symfony-API/
      - name: Cache composer
        uses: actions/cache@v2
        env:
          cache-name: cache-symfony-composer-modules
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}
      - name: Run composer install
        run: composer install --no-suggest --no-dev --no-progress --optimize-autoloader --classmap-authoritative
        working-directory: ./Symfony-API/
      - name: Copy OpenAPIServerBundle
        run: rm -r server-bundle && cp -r ../../../OpenAPIServerBundle/ server-bundle
        working-directory: ./Symfony-API/vendor/openapi
      - name: Insert ReactJS files
        uses: actions/download-artifact@v2
        with:
          name: react-build
          path: Symfony-API/public/
      - name: copy index.html of react to template
        run: "rm ./templates/index.html && rm ./templates/base.html.twig && ln -s ../public/index.html ./templates/index.html"
        working-directory: ./Symfony-API/
      - name: copy Dockerfile
        run: "cp ../dockerBuild/SymfonyDockerfile Dockerfile"
        working-directory: ./Symfony-API/
      - name: copy docker-compose
        run: "cp ../docker-compose.yml docker-compose.yml"
        working-directory: ./Symfony-API/
      - name: remove .gitignore
        run: "rm .gitignore"
        working-directory: ./Symfony-API/
  # Integration test
      - name: install apache2 with php
        run: sudo apt-get install apache2 php7.4 libapache2-mod-php7.4 curl
      - name: change config to point at symfony
        run: sudo sed -i "s/DocumentRoot .*$/DocumentRoot $(pwd)/g" /etc/apache2/sites-enabled/000-default.conf
        working-directory: ./Symfony-API/
      - name: restart apache
        run: sudo /etc/init.d/apache2 restart || systemctl status apache2.service
      - name: check availability of index
        run: curl http://localhost
      - name: check availability of info endpoint
        run: curl http://localhost/info
  #RELEASE
#      - name: rename Symfony
#        run: mv Symfony-API password-manager
#        working-directory: ./
#      - name: zip
#        run: "zip --symlinks -r password-manager.zip ./password-manager"
#        working-directory: ./
#      - name: generate release name
#        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ env.RELEASE_VERSION }}
#          release_name: ${{ env.RELEASE_VERSION }}
#          body: ${{ github.event.head_commit.message }}
#          draft: true
#          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
#      - name: Upload Release Artifact
#        id: upload-release-asset 
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./password-manager.zip
#          asset_name: password-manager.zip
#          asset_content_type: application/zip
