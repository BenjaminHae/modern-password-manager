name: build application and create release
on: 
  push:
    tags:
      - 'v*'
jobs:
  build_react:
    name: build react app 
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Cache node
        uses: actions/cache@v2
        env:
          cache-name: cache-react-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - run: npm install
        working-directory: ./reactClient/my-app/
      - run: npm link ../../OpenAPIReactClient/
        working-directory: ./reactClient/my-app/
      - run: npm run build
        working-directory: ./reactClient/my-app/
        env:
          CI: ""
      - uses: actions/upload-artifact@v2
        with:
          name: react-build
          path: reactClient/my-app/build/
  build_symfony:
    name: build symfony
    needs: build_react
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: install php
        uses: shivammathur/setup-php@2.11.0
        with:
          php-version: '7.4'
          tools: composer
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
        working-directory: ./Symfony-API/
      - name: Cache composer
        uses: actions/cache@v2
        env:
          cache-name: cache-symfony-composer-modules
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/composer.lock') }}
      - name: Run composer install
        run: composer install --no-suggest --no-dev --no-progress --optimize-autoloader --classmap-authoritative
        working-directory: ./Symfony-API/
      - name: Copy OpenAPIServerBundle
        run: rm -r server-bundle && cp -r ../../../OpenAPIServerBundle/ server-bundle
        working-directory: ./Symfony-API/vendor/openapi
      - name: Insert ReactJS files
        uses: actions/download-artifact@v2
        with:
          name: react-build
          path: Symfony-API/public/
      - name: copy index.html of react to template
        run: "rm ./templates/index.html && rm ./templates/base.html.twig && ln -s ../public/index.html ./templates/index.html"
        working-directory: ./Symfony-API/
      - name: copy Dockerfile
        run: "cp ../dockerBuild/SymfonyDockerfile Dockerfile"
        working-directory: ./Symfony-API/
      - name: copy docker-compose
        run: "cp ../docker-compose.yml docker-compose.yml"
        working-directory: ./Symfony-API/
      - name: remove .gitignore
        run: "rm .gitignore"
        working-directory: ./Symfony-API/
      - name: create archive
        run: tar czf symfony-build.tar.gz Symfony-API && ls -la
      - uses: actions/upload-artifact@v2
        with:
          name: symfony
          path: ./symfony-build.tar.gz
  test_integration:
    name: integration tests
    needs: build_symfony
    runs-on: ubuntu-latest
    steps:
      - name: Insert Symfony files
        uses: actions/download-artifact@v2
        with:
          name: symfony
          path: .
      - name: unarchive symfony build
        run: tar xf symfony-build.tar.gz && ls -la && cd Symfony-API && ls -la
      - name: install apache2 with php
        run: sudo apt-get purge php7.4 php7.4-common && sudo apt-get autoremove && sudo apt-get install apache2 php7.4 php-sqlite3 libapache2-mod-php7.4 curl httpie
      - name: copy data to wwwroot
        run: sudo cp -r ./Symfony-API /var/www/html
      - name: change ownership of symfony data
        run: sudo chown -R www-data:www-data /var/www/html/Symfony-API
        working-directory: ./Symfony-API
      - name: change config to point at symfony
        run: sudo sed -i "s~DocumentRoot .*$~DocumentRoot $(pwd)~g" /etc/apache2/sites-enabled/000-default.conf
        working-directory: /var/www/html/Symfony-API/public
      - name: set required apache configuration        
        run: sudo sed -i "/DocumentRoot /a <Directory $(pwd)>\n        AllowOverride All\n        Order Allow,Deny\n        Allow from All\n    </Directory>" /etc/apache2/sites-enabled/000-default.conf
        working-directory: /var/www/html/Symfony-API/public
      - name: enable apache2 modules
        run: sudo a2enmod rewrite
      - name: restart apache
        run: sudo /etc/init.d/apache2 restart || systemctl status apache2.service
      - name: configure app
        run: sudo sh -c 'echo "DATABASE_URL=\"sqlite:////var/www/pwman.sqlite\"" > .env.local'
        working-directory: /var/www/html/Symfony-API/
      - name: prepare database
        run: sudo php bin/console doctrine:schema:update --force && sudo chown -R www-data:www-data /var/www/
        working-directory: /var/www/html/Symfony-API/
      - name: checkout
        uses: actions/checkout@v2
      - name: install bats
        run: git clone https://github.com/bats-core/bats-core.git bats && mkdir test_helper && git clone https://github.com/bats-core/bats-support.git test_helper/bats-support && git clone https://github.com/bats-core/bats-assert.git test_helper/bats-assert
        working-directory: .github/workflows

      # actual tests start here
      - name: run bats tests
        run: ./bats/bin/bats test.bats
        working-directory: .github/workflows
      - name: apache errorlog
        if: ${{ failure() }}
        run: sudo cat /var/log/apache2/error.log*
      - name: symfony error log
        if: ${{ failure() }}
        run: sudo cat var/log/prod/*
        working-directory: /var/www/html/Symfony-API/
  release:
    name: create release draft
    needs: test_integration
    runs-on: ubuntu-latest
    steps:
      - name: Insert Symfony files
        uses: actions/download-artifact@v2
        with:
          name: symfony
          path: .
      - name: unarchive symfony build
        run: tar xf symfony-build.tar.gz
      - name: rename Symfony
        run: mv Symfony-API password-manager
        working-directory: ./
      - name: zip
        run: "zip --symlinks -r password-manager.zip ./password-manager"
        working-directory: ./
      - name: generate release name
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          body: ${{ github.event.head_commit.message }}
          draft: true
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      - name: Upload Release Artifact
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./password-manager.zip
          asset_name: password-manager.zip
          asset_content_type: application/zip
  build_and_push_docker:
    name: build docker image and push to ghcr.io
    needs: test_integration
    runs-on: ubuntu-latest
    steps:
      - name: Insert Symfony files
        uses: actions/download-artifact@v2
        with:
          name: symfony
          path: .
      - name: unarchive symfony build
        run: tar xf symfony-build.tar.gz && ls -la && cd Symfony-API && ls -la
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/benjaminhae/modern-password-manager
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: Symfony-API
          tags: ${{ steps.meta.outputs.tags }}
          push: true
