# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    session:
        cookie_secure: true
        # Session idle timeout 10 minutes
        gc_maxlifetime: 600

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # OpenAPIService

    App\Api\:
        resource: '../src/Api'
    
    App\Api\UserApi:
        tags:
            - { name: "open_api_server.api", api: "user" }
        arguments:
            $allowRegistration: '%env(REGISTRATION_ALLOWED)%'
    App\Api\AccountsApi:
        tags: 
            - { name: 'open_api_server.api', api: 'accounts' }
    App\Api\MaintenanceApi:
        tags: 
            - { name: 'open_api_server.api', api: 'maintenance' }
        arguments:
            $allowRegistration: '%env(REGISTRATION_ALLOWED)%'
            $idleTimeout: '%env(IDLE_TIMEOUT)%'
            $defaultUserConfig: '%env(DEFAULT_USER_CONFIG)%'

    # EventListeners

    App\EventListener\LoginListener:
        tags:
            - { name: 'kernel.event_listener', event: 'security.interactive_login' }
            - { name: 'kernel.event_listener', event: 'security.authentication.failure' }

    App\EventSubscriber\:
        resource: '../src/EventSubscriber/'

    #App\EventListener\AuthenticationFailureListener:
    #    tags:

    App\Services\:
        resource: '../src/Services/*'
      
    # Plugin Services
    App\Services\PluginManager:
        arguments: [!tagged app.plugin]
    App\Plugins\:
        resource: '../src/Plugins/'
        tags:
            - "app.plugin"
    
