openapi: 3.0.0
info:
  description: This is a password manager server.
  version: 0.0.1
  title: Password Manager
  termsOfService: ""
  contact:
    email: test@te.st
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: user
    description: Creating users, signing in/out
  - name: accounts
    description: Access to accounts stored in the password manager
  - name: maintenance
    description: General information
paths:
  /info:
    get:
      tags:
        - maintenance
      summary: get information about the server for the client
      description: ""
      operationId: serverInformation
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServerInformation"
  /user:
    put:
      tags:
        - user
      summary: registration
      description: ""
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationInformation"
        description: Registration Object
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessMessage"
        "405":
          description: Invalid input
      security:
        - csrf: []
  /user/login:
    post:
      tags:
        - user
      summary: login
      description: ""
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogonInformation"
        description: Logon Object
        required: true
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                example: SESSIONID=1234567890; Path=/; HttpOnly; Secure; SameSite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogonResult"
        "405":
          description: Invalid input
      security:
        - csrf: []
  /user/login/webauthn:
    get:
      tags:
        - user
      summary: "get WebAuthn challenge"
      description: ""
      operationId: loginUserWebAuthnChallenge
      responses: 
        "200":
          description: returns challenge
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWebAuthnChallenge"
    post:
      tags:
        - user
      summary: "login user with WebAuthn"
      description: "add webauthn"
      operationId: loginUserWebAuthnGet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWebAuthnGet"
        description: WebAuthnGet Object
        required: true
      responses:
        "200":
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                example: SESSIONID=1234567890; Path=/; HttpOnly; Secure; SameSite
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWebAuthnLogonResult"
        "405":
          description: Invalid input
      security:
        - csrf: []
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessMessage"
  /user/changepassword:
    post:
      tags:
        - user
      summary: "change user password"
      description: "change password of current user and upload reencrypted accounts"
      operationId: changePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePassword"
        description: ChangePassword Object
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessMessage"
        "403":
          description: Unauthorized
      security:
        - csrf: []
  /user/webauthn:
    get:
      tags:
        - user
      summary: "get all registered WebAuthn credentials for the user"
      description: ""
      operationId: getUserWebAuthnCreds
      responses: 
        "200":
          description: list of stored WebAuthn credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWebAuthnCreds"
        "403":
          description: Unauthorized
    post:
      tags:
        - user
      summary: "add a webauthn credential"
      description: "add webauthn"
      operationId: createUserWebAuthn
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserWebAuthnCreateWithKey"
        description: WebAuthnCreate Object
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessMessage"
        "403":
          description: Unauthorized
      security:
        - csrf: []
  /user/webauthn/{id}:
    delete:
      tags:
        - user
      summary: Delete a stored WebAuthn Public Key
      description: ""
      operationId: deleteUserWebAuthn
      parameters:
        - name: id
          in: path
          required: true
          description: The index of the WebAuthn Public Key to delete (not the public key id)
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWebAuthnCreds"
        "400":
          description: Invalid status value
        "403":
          description: Unauthorized
  /user/settings:
    get:
      tags:
        - user
      summary: Returns the client settings of the current user
      description: ""
      operationId: getUserSettings
      responses: 
        "200":
          description: stored client values (encrypted string that contains a JSON)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings"
        "403":
          description: Unauthorized
    post:
      tags:
        - user
      summary: "change client settings of current user"
      description: "parameter contains encrypted client settings"
      operationId: setUserSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSettings"
        description: Settings Object
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericSuccessMessage"
        "403":
          description: Unauthorized
      security:
        - csrf: []
  /user/history:
    get:
      tags:
        - user
      summary: Returns a history of successful and failed logins
      description: ""
      operationId: getUserHistory
      responses: 
        "200":
          description: Array of logins
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserHistory"
        "403":
          description: Unauthorized
  /accounts:
    get:
      tags:
        - accounts
      summary: Returns the accounts stored by the current user
      description: ""
      operationId: getAccounts
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accounts"
        "400":
          description: Invalid status value
        "403":
          description: Unauthorized
    put:
      tags:
        - accounts
      summary: Add Account
      description: ""
      operationId: addAccounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewAccounts"
        description: Account Values
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accounts"
        "400":
          description: Invalid status value
        "403":
          description: Unauthorized
      security:
        - csrf: []
  /accounts/{id}:
    post:
      tags:
        - accounts
      summary: Update a stored account
      description: ""
      operationId: updateAccount
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the account
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
        description: Account Object
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accounts"
        "400":
          description: Invalid status value
        "403":
          description: Unauthorized
      security:
        - csrf: []
    delete:
      tags:
        - accounts
      summary: Delete a stored Account
      description: ""
      operationId: deleteAccount
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the account
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accounts"
        "400":
          description: Invalid status value
        "403":
          description: Unauthorized
externalDocs:
  description: Repository
  url: http://github.com/zeruniverse/PasswordManager
components:
  securitySchemes:
    csrf:
      type: apiKey
      in: header
      name: X-CSRF-TOKEN
  schemas:
    RegistrationInformation:
      type: object
      allOf:
        - $ref: "#/components/schemas/LogonInformation"
        - $ref: "#/components/schemas/UserInformation"
    LogonInformation:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    LogonResult:
        type: object
        allOf:
          - $ref: "#/components/schemas/GenericSuccessMessage"
          - $ref: "#/components/schemas/LogonSecurityInformation"
    DecryptionKey:
      type: object
      properties:
        decryptionKey:
          type: string
    LogonSecurityInformation:
      type: object
      properties:
        lastLogin:
          type: string
          format: date-time
          nullable: true
        failedLogins:
          type: integer
    UserInformation:
      type: object
      properties:
        email:
          type: string
    UserHistory:
      type: array
      items:
        $ref: "#/components/schemas/HistoryItem"
    HistoryItem:
      type: object
      required:
        - UserAgent
        - IP
        - Time
        - Event
        - EventResult
      properties:
        UserAgent:
          type: string
        IP:
          type: string
        Time:
          type: string
          format: date-time
        Event:
          type: string
          enum:
            - Login
            - ChangePassword
            - Registration
        EventResult:
          type: string
    UserSettings:
      type: object
      required:
        - encryptedUserSettings
      properties:
        encryptedUserSettings:
          type: string
    UserWebAuthnChallenge:
      type: object
      required:
        - challenge
      properties:
        challenge:
          type: string
    UserWebAuthnCred:
      type: object
      required:
        - name
        - id
      properties:
        name:
          type: string
        id:
          type: integer
    UserWebAuthnCreds:
      type: array
      items:
        $ref: "#/components/schemas/UserWebAuthnCred"
    UserWebAuthnCreate:
      type: object
      required:
        - id
        - response
        - name
      properties:
        id:
          type: string
        name:
          type: string
        response:
          $ref: "#/components/schemas/UserWebAuthnCreateResponse"
    UserWebAuthnCreateWithKey:
      type: object
      allOf:
       - $ref: "#/components/schemas/UserWebAuthnCreate"
       - $ref: "#/components/schemas/DecryptionKey"
    UserWebAuthnCreateResponse:
      type: object
      required:
        - attestationObject
        - clientDataJSON
        - type
      properties:
        attestationObject:
          type: string
        clientDataJSON:
          type: string
        type:
          type: string
    UserWebAuthnGet:
      type: object
      required:
        - id
        - response
      properties:
        id:
          type: string
        response:
          $ref: "#/components/schemas/UserWebAuthnGetResponse"
    UserWebAuthnGetResponse:
      type: object
      required:
        - authenticatorData
        - clientDataJSON
        - type
        - signature
        - userHandle
      properties:
        authenticatorData:
          type: string
        clientDataJSON:
          type: string
        type:
          type: string
        signature:
          type: string
        userHandle:
          type: string
    UserWebAuthnLogonResult:
      type: object
      allOf:
      - $ref: "#/components/schemas/LogonResult"
      - $ref: "#/components/schemas/DecryptionKey"
    ChangePassword:
      type: object
      required:
        - oldPassword
        - newPassword
        - accounts
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
        accounts:
          $ref: "#/components/schemas/Accounts"
    AccountId:
      allOf:
        - $ref: "#/components/schemas/Index"
        - $ref: "#/components/schemas/Account"
    Account:
      type: object
      required:
        - name
        - additional
        - password
      properties:
        name:
          type: string
        additional:
          type: string
        password:
          type: string
    Accounts:
      type: array
      items:
        $ref: "#/components/schemas/AccountId"
    NewAccounts:
      type: array
      items:
        $ref: "#/components/schemas/Account"
    Index:
      type: object
      required:
        - index
      properties:
        index:
          type: integer
    File:
      type: object
      required:
        - index
        - name
        - key
      properties:
        index:
          type: integer
        name:
          type: string
        key:
          type: string
    Files:
      type: array
      items:
        $ref: "#/components/schemas/File"
    ServerInformation:
      type: object
      required:
        - csrfToken
      properties:
        csrfToken:
          type: string
        allowRegistration:
          type: boolean
    GenericSuccessMessage:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        message:
          type: string
