kind: pipeline
type: docker
name: build
steps:
 - name: restore caches
   when:
     event:
       exclude:
       - promote
   image: plugins/s3-cache
   settings:
     pull: true
     endpoint: http://minio:9000
     access_key: 
       from_secret: "s3_access_key"
     secret_key: 
       from_secret: "s3_secret_key"
     restore: true
 - name: react
   when:
     event:
       exclude:
       - promote
   image: node:12
   commands:
    - cd reactClient/my-app
    - npm ci --cache ../../.npm --prefer-offline
    - npm link --unsafe-perm ../../OpenAPIReactClient
    - CI="" npm run build
 - name: cache build for deployment
   when:
     event:
       exclude:
       - promote
   image: plugins/s3-cache
   settings:
     pull: true
     endpoint: http://minio:9000
     access_key: 
       from_secret: "s3_access_key"
     secret_key: 
       from_secret: "s3_secret_key"
     filename: "${DRONE_COMMIT}.tar"
     rebuild: true
     mount:
       - reactClient/my-app/build
 - name: restore caches for deployment
   when:
     event:
     - promote
   image: plugins/s3-cache
   settings:
     pull: true
     endpoint: http://minio:9000
     access_key: 
       from_secret: "s3_access_key"
     secret_key: 
       from_secret: "s3_secret_key"
     restore: true
     filename: "${DRONE_COMMIT}.tar"
 - name: symfony
   image: composer:2
   commands:
    - cd ./Symfony-API
    - composer -q install --no-suggest --no-dev --no-progress --optimize-autoloader --classmap-authoritative
    - (cd vendor/openapi && rm -r server-bundle && cp -r ../../../OpenAPIServerBundle/ server-bundle)
    - cp -r ../reactClient/my-app/build/. public/
    #- rm ./templates/base.html.twig && ln -s ../public/index.html ./templates/index.html
    - cp ../dockerBuild/SymfonyDockerfile Dockerfile
 - name: cache stuff
   when:
     event:
       exclude:
       - promote
   image: plugins/s3-cache
   settings:
     pull: true
     endpoint: http://minio:9000
     access_key: 
       from_secret: "s3_access_key"
     secret_key: 
       from_secret: "s3_secret_key"
     rebuild: true
     mount:
       - .npm
       - Symfony-API/vendor
 - name: flush cache older than 14 days
   when:
     event:
       exclude:
       - promote
   image: plugins/s3-cache
   settings:
     pull: true
     endpoint: http://minio:9000
     access_key: 
       from_secret: "s3_access_key"
     secret_key: 
       from_secret: "s3_secret_key"
     flush: true
     flush_age: 14
 - name: "deploy to environment ${DRONE_DEPLOY_TO}"
   image: alpine:3.12
   environment:
     SSH_PRIVATE_KEY:
       from_secret: "${DRONE_DEPLOY_TO}_ssh_private_key"
     SSH_HOST:
       from_secret: "${DRONE_DEPLOY_TO}_ssh_host"
     SSH_USER:
       from_secret: "${DRONE_DEPLOY_TO}_ssh_user"
     SSH_HOST_KEY:
       from_secret: "${DRONE_DEPLOY_TO}_ssh_host_key"
     DEPLOY_PATH: "~/htdocs/pwman-${DRONE_DEPLOY_TO}/"
     COPY_PATH: "~/tmp/mpm.zip"
     COPY_REMOTE_PATH: "tmp/"
     DEV_PHP_VERSION: "php7.3"
     TEST_PHP_VERSION: "php7.4"
     PROD_PHP_VERSION: "php7.4"
   commands:
     - set -ex
     - apk update
     - apk add zip openssh-client
    # setup ssh
     - mkdir ~/.ssh
     - echo $${SSH_PRIVATE_KEY} | base64 -d > ~/.ssh/id_drone
     - chmod 0600 ~/.ssh/id_drone
     - echo $${SSH_HOST_KEY} | base64 -d > ~/.ssh/known_hosts
     - chmod 0600 ~/.ssh/known_hosts
     # create zip archive
     - (cd ./Symfony-API && zip -q --symlinks -r ../mpm.zip .)
     # transfer to host
     - scp -i ~/.ssh/id_drone mpm.zip "$${SSH_USER}@$${SSH_HOST}:$${COPY_REMOTE_PATH}"
     # clear destination
     #- ssh -i ~/.ssh/id_drone "$${SSH_USER}@$${SSH_HOST}" "/bin/sh -c 'cd $${DEPLOY_PATH} && ls -1 | xargs rm -r' "
     # extract data
     - ssh -i ~/.ssh/id_drone "$${SSH_USER}@$${SSH_HOST}" "unzip -o -q $${COPY_PATH} -d $${DEPLOY_PATH} && rm $${COPY_PATH}"
     # execute db update
     - ssh -i ~/.ssh/id_drone "$${SSH_USER}@$${SSH_HOST}" "cd $${DEPLOY_PATH} && $${${DRONE_DEPLOY_TO^^}PHP_VERSION} bin/console doctrine:schema:update --dump-sql && $${${DRONE_DEPLOY_TO^^}PHP_VERSION} bin/console doctrine:schema:update --force && $${${DRONE_DEPLOY_TO^^}PHP_VERSION} bin/console cache:clear"
   when:
     event:
      - promote
     target:
      - test
      - prod
